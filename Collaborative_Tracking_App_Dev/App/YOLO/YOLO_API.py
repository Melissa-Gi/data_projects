"""
Module Name: YOLO_API.py

Description:
    This module encapsulates the YOLO object detection model for analyzing images and video frames. 
    It provides functionality to load a YOLO model, detect items within frames, and retrieve 
    class names and colors associated with detected objects. The module leverages the Ultralytics 
    YOLO implementation for real-time object detection.

Usage:
    To run the application, create an instance of the `YOLO_model` class. 
    Use the detect_frame() method to analyze media and obtain 
    detected items, their confidence, bounding boxes, and average colors.

Dependencies:
    - ultralytics: For the YOLO model.
    - numpy: For handling numerical operations and arrays.
    - cv2 (OpenCV): For image processing tasks, including color calculations.

Author: team 120
Date: 19/09/2024
"""


from ultralytics import YOLO
import numpy as np
import cv2

class YOLO_model:
    """
    A class to encapsulate the YOLO object detection model.

    This class provides methods to load a YOLO model, detect objects in video frames, 
    and retrieve annotations.

    Attributes:
        yolo_instance (YOLO): The YOLO model instance.
        classes (list): List of class names the model can detect.
        colours (np.ndarray): Array of RGB colors for the classes.
    """
    def __init__(self, model_path="yolov10m.pt"):
        """
        Initializes the YOLO model with the specified model path.

        Args:
            model_path (str): The path to the YOLO model file.
        """
        self.yolo_instance = YOLO(model_path, verbose=False) # YOLO model
        
        self.classes=list(self.yolo_instance.names.values()) # YOLO class names
        self.colours = np.random.uniform(0, 255, size=(len(self.classes), 3)) # Colours for the classes

    def detect_frame(self, frame):
        """
        Analyzes a single frame using the YOLO model.

        Args:
            frame (np.ndarray): The input image/frame to analyze.

        Returns:
            tuple: A tuple containing:
                - class_ids (list): List of class ID numbers for detected objects.
                - confidences (list): List of confidence scores for the detected objects.
                - bboxes (list): List of bounding boxes (x1, y1, x2, y2) for each detected object.
                - average_colours (list): List of average colors for each detected object.
        """
        # The unparsed results of the frame
        results = self.yolo_instance(frame, verbose=False, conf=0.6)
        
        # Parse the detection results
        bboxes = []
        confidences = []
        class_ids = []
        average_colours = []

        for result in results:
            # Extract bounding boxes, confidences, and class IDs
            for det in result.boxes:
                bbox = det.xyxy[0].cpu().numpy().astype(int)
                conf = det.conf.cpu().numpy()
                class_id = int(det.cls.cpu().numpy())

                roi = frame[bbox[1]:bbox[3], bbox[0]:bbox[2]]
                average_colour = cv2.mean(roi)

                # Append to the lists
                bboxes.append(bbox)
                confidences.append(conf)
                class_ids.append(class_id)
                average_colours.append(average_colour)

        return class_ids, confidences, bboxes, average_colours

    # Returns the classes the YOLO model can identify
    def get_classes(self):
        return self.classes
    
    # Returns the colours generated by the YOLO model
    def get_colours(self):
        return self.colours